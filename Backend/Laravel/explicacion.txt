- Passos per com implementar una API REST CRUD en Laravel gastant Postman:
-------------------------------------------------------------------------------------------
    - https://medium.com/fabcoding/laravel-rest-api-2-crud-operations-2ca4ef743440

- Passos per implementar des de zero l'exercici 2_CRUD:
-------------------------------------------------------------------------------------------
    $ composer create-project laravel/laravel 2_CRUD --prefer-dist
    $ sudo chmod 777 -R 2_CRUD
    $ cd 2_CRUD/
    $ composer install --ignore-platform-reqs
    $ composer update --ignore-platform-reqs
    $ php artisan key:generate
    $ php artisan route:list
    $ sudo service apache2 start
    $ sudo service mysql start
    $ php artisan serve
    - http://127.0.0.1:8000

    - http://localhost/phpmyadmin/
    - create database crud_1; use crud_1;
    - config/database.php: afegir les credencials DB_DATABASE, DB_USERNAME, DB_PASSWORD 
    - .env: afegir les credencials anteriors

    $ php artisan serve
    - http://127.0.0.1:8000

    - Crear el model:
        $ php artisan make:model Student
        - Afegir els camps que tindrà el model

    - Crear la taula de DB o migration:
        $ php artisan make:migration create_students_table
        - Afegir els camps que tindrà la taula en DB

    - Executar la migration en DB:
        $ php artisan migrate
        - En phpmyadmin tindrem la taula students

    - Crear una factoria i un seeder per a la migration students:
        - En composer.json ja tenim instal.lada la llibreria fakerphp
        $ php artisan make:factory StudentFactory
        $ php artisan make:seeder StudentSeeder
        - Afegir les dades amb què s'omplirà la taula en DB

    - Executar el seeder anterior per omplir la taula students en DB
        $ php artisan db:seed --class=StudentSeeder
        - Explicació: https://laravel.com/docs/9.x/seeding
        - En phpmyadmin tindrem la taula students plena
        
    - Crear el controller:
        $ php artisan make:controller StudentController --resource
        - Afegir el codi del CRUD a StudentController
        - Què és Eloquent, l'ORM de Laravel: https://www.tutsmake.com/laravel-eloquent-cheat-sheet-eloquent-orm/
        
        - Crear una Request per validar un Student al crear-lo:
            $ php artisan make:request StoreStudentRequest
            - Afegir les validacions
            - Explicació:
                - https://laravel.com/docs/9.x/validation
                - https://styde.net/como-trabajar-con-form-requests-en-laravel/

        - Crear el resource -> defineix com pintarem els students en format json
            $ php artisan make:resource StudentResource
            - Afegir els camps del model Student per a que es pinten per json
            - Explicació: https://blog.coffeedevs.com/laravel-resources/

    - Afegir les routes del StudentController a api.php:
        $ php artisan route:list

    $ php artisan serve

- Què és Eloquent, l'ORM de Laravel:
-------------------------------------------------------------------------------------------
    - https://laravel.com/docs/9.x/eloquent
    - https://laravel.com/docs/9.x/queries
    - https://styde.net/laravel-6-doc-eloquent-primeros-pasos/

- Comandes php artisan:
-------------------------------------------------------------------------------------------
    - https://jrgonzalez.es/guia-comandos-artisan
